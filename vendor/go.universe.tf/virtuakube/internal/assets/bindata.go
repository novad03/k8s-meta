// Code generated by go-bindata. DO NOT EDIT.
// sources:
// addon-images (513B)
// registry.yaml (1.01kB)
// net/calico.yaml (16.713kB)
// net/flannel.yaml (10.598kB)
// net/weave.yaml (6.87kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _addonImages = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xca\x49\x0e\xc2\x30\x0c\x40\xd1\xab\x70\x81\xba\xe9\x40\x25\x72\x1b\xe3\x1a\x88\x9a\xc6\xc1\xe9\x40\x6f\x8f\x10\xc3\x82\x05\x62\x91\xdd\xd7\xd7\x53\x3e\xbb\x34\xe9\x66\xeb\x1d\xa1\x77\x24\xe5\xb4\xc5\x0b\xda\xa5\x81\x06\x3e\x2f\x48\xcf\x5f\x8b\x82\x7b\x9f\xeb\x8c\x1b\x38\x29\x49\x94\x25\x95\x27\x8f\x21\xb0\xb7\x8b\x81\xca\x80\x29\x70\xec\xbb\x36\x0f\xd2\x31\x1f\xca\x40\x62\xa4\xae\xf5\x9c\x89\xa5\xe6\x60\x6e\xff\xa1\x5e\x68\x60\x7d\xb0\x95\x71\xe1\x55\x74\x48\xcf\x2c\x86\xf9\xc8\xb6\x86\x3d\x54\xbf\x54\x88\xf4\x42\xf7\x00\x00\x00\xff\xff\x82\xdb\x99\x45\x01\x02\x00\x00"

func addonImagesBytes() ([]byte, error) {
	return bindataRead(
		_addonImages,
		"addon-images",
	)
}

func addonImages() (*asset, error) {
	bytes, err := addonImagesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "addon-images", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0xdd, 0x66, 0xe7, 0x15, 0xf8, 0xbc, 0x7b, 0xa2, 0xd8, 0x67, 0x41, 0x79, 0x90, 0x1f, 0xeb, 0x5, 0x9e, 0xfa, 0x24, 0x9, 0x7f, 0x6b, 0x16, 0xfd, 0x9, 0xb4, 0xe3, 0x24, 0xa4, 0xc6, 0xa5}}
	return a, nil
}

var _registryYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\x6b\xdb\x40\x10\xbd\xef\xaf\x18\x72\x57\x64\xb7\xf4\xb2\xb7\x10\xa9\xa9\xa1\xa9\x8d\x24\x0a\x3e\x99\xb1\x3c\xa4\x4b\xf6\x8b\xdd\xb1\xa8\x28\xfd\xef\x65\x1b\x4b\x91\x22\xb7\xb7\xcc\x49\x3c\xcd\x7b\xf3\x66\xf6\x65\x59\x26\xd0\xab\xef\x14\xa2\x72\x56\x02\xfd\x64\xb2\xe9\x33\xe6\xdd\xfa\x48\x8c\x6b\xf1\xac\xec\x49\x42\x41\x5e\xbb\xde\x90\x65\x61\x88\xf1\x84\x8c\x52\x00\x58\x34\x24\x21\xd0\x93\x8a\x1c\xfa\x0b\x10\x3d\xb6\x24\xe1\xf9\x7c\xa4\x2c\xf6\x91\xc9\x08\x00\x8d\x47\xd2\x31\x71\x00\xd0\xfb\x09\x29\x7a\x6a\x13\x1e\xc8\x6b\xd5\x62\x94\xb0\x16\x00\x4c\xc6\x6b\x64\x7a\x61\x4c\x67\xa6\x9a\xaa\x2d\x15\x13\x32\xa8\xa6\xb2\xee\x44\x35\x69\x6a\xd9\x85\x57\x4e\x42\xb3\xe0\x34\xdd\x26\xa7\xc1\x12\x53\xbc\x55\x2e\x37\x18\x99\x82\x84\x9b\x9b\x4b\x6b\xeb\x2c\xa3\xb2\x14\xc6\x81\xd9\x72\xf1\x97\x52\x06\x9f\x26\xb8\xfc\x30\xfe\x21\xdb\xbd\x8e\x1e\xf8\x55\xf9\xb0\xa9\x9b\x6a\x7f\xf8\xd2\x34\xbb\xc3\x5d\x51\x54\x63\x0b\x40\x87\xfa\x4c\x12\xe4\xa7\xd5\x6a\xf5\x6f\x66\xdd\x6c\xab\xbb\x87\xf2\xf0\x79\xf3\xb5\xac\xf7\x75\x53\x3e\x1e\xaa\xed\xb6\x29\x36\x55\x79\xdf\x6c\xab\xfd\x52\x30\xef\x30\xe4\x5a\x1d\xf3\x85\xfb\xce\xe9\xb3\xa1\x47\x77\xb6\x1c\x97\x66\xff\xee\x96\x45\x76\x81\x26\xa2\x26\x75\xef\x90\x7f\xfc\x4f\xd8\xbb\x30\x57\x1c\x4f\xba\x73\x81\x25\xcc\x56\xbc\x92\xaa\x51\x27\x38\x76\xad\xd3\x12\x9a\xfb\x9d\x98\x9a\x5e\x3c\xcd\x35\xb7\x64\x3c\xf7\x85\x0a\x12\x7e\xfd\x16\x6f\xa3\xdf\x0d\x51\xaf\x29\x74\xaa\xa5\x77\xcb\x39\xf7\x9e\x24\x7c\x73\x27\x4a\xcb\x8b\xc9\x75\xae\xc6\xca\xcf\x2f\x64\x2f\x3c\x09\x1f\x57\x03\xf6\xf6\x2c\x71\x96\xf5\xb9\x8b\x3f\x01\x00\x00\xff\xff\x44\x90\xb8\xd2\xf2\x03\x00\x00"

func registryYamlBytes() ([]byte, error) {
	return bindataRead(
		_registryYaml,
		"registry.yaml",
	)
}

func registryYaml() (*asset, error) {
	bytes, err := registryYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registry.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x66, 0x9, 0xb0, 0x75, 0xb4, 0x7c, 0x58, 0xcc, 0x66, 0x99, 0x31, 0xd8, 0xaa, 0x58, 0x8b, 0xc1, 0xb6, 0xca, 0x1f, 0x83, 0xc0, 0xc1, 0x71, 0x9c, 0xec, 0xf1, 0xb1, 0x8f, 0x2e, 0x50, 0x5c}}
	return a, nil
}

var _netCalicoYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x7b\x5b\x73\x22\xb9\x92\xff\x3b\x9f\x22\x03\x3f\xcc\xff\x7f\xc2\x05\xee\xcb\xcc\x76\xb3\x4f\x18\xd3\x6e\xa2\x6d\x20\x0c\xee\xd9\x89\x89\x0d\x46\x54\x25\xa0\xb5\x4a\xaa\x95\x54\xb8\x99\xdd\xf3\xdd\x37\x74\xa9\x2b\x55\xb8\xdd\x33\xed\x3e\x3c\xd9\x25\x29\x33\xf5\x53\x2a\x6f\x92\xce\x60\x44\x18\x0d\x05\x7c\x46\xa9\xa8\xe0\xb0\x7f\xd3\x7b\xd3\x7b\xdd\x39\x83\x9d\xd6\x89\x1a\xf4\xfb\x91\x08\x55\x2f\x91\xe2\xbf\x30\xd4\xa1\xed\xdb\x13\x72\xdb\x37\xfd\xfa\x12\x19\x12\x85\xea\xcc\x8f\x7a\xa0\x3c\x1a\xc0\x88\xa5\x4a\xa3\xbc\x13\x0c\x3b\x24\xa1\x9e\xf2\x00\xe4\x9a\x84\x3d\x92\xea\x9d\x90\xf4\x4f\xa2\xa9\xe0\xbd\x87\x77\xaa\x47\x45\x7f\xff\x6a\x8d\x9a\xbc\xea\xc4\xa8\x49\x44\x34\x19\x74\x00\x38\x89\x71\x00\x8e\x63\xc0\x45\x84\x1d\x99\x32\x54\xa6\x29\x00\x92\xd0\x6b\x29\xd2\x44\x0d\xe0\xf7\x6e\xf7\x3f\x3b\x00\x00\x12\x95\x48\x65\xe8\xba\x98\x5f\x60\x69\xa8\x84\x84\xa8\xf2\x4f\x0a\xe5\x9e\x86\x48\xc2\x50\xa4\x5c\xbb\xef\x7b\x94\xeb\xd2\xa8\x2d\xea\xfc\x6f\x46\x55\xf1\xcf\x23\xd1\xe1\xee\x39\xfc\x13\x11\xa9\xbe\xd2\x44\xa7\x8d\x8c\x92\x6f\xa1\xf7\x7d\x25\xf6\xf0\x9c\xe0\xf2\xd5\xa4\x90\x47\x89\xa0\x27\x31\xfe\xfa\x85\x14\xd1\x29\x99\x1a\x66\x9e\x26\x11\xd1\xf8\x14\x10\xf8\x45\x23\x37\xda\xa9\x4e\xf0\x46\xfd\x28\xe4\x43\x22\x18\x0d\xe9\x33\xa5\x68\x61\xeb\x49\x52\xbe\xf5\x3b\xe0\x2f\x71\xcf\x98\x54\xf8\xd7\x38\x86\x32\x3a\xde\xc4\xed\x5c\xb7\x4c\xac\x09\xdb\x20\xa3\x5f\x42\xc1\x37\x74\x5b\x6c\xa0\xd2\xc7\x54\xda\x5d\x5c\xb4\xad\xb7\x49\x82\x28\x55\x8d\xce\x7a\x9b\xd4\xa9\xe4\x9f\x8e\x68\xd0\x24\x11\x82\xd5\x49\x34\xc1\x70\xd4\xaa\x50\xab\x93\xc0\x99\xef\xa1\xb3\x4e\x94\x6f\x84\x8c\x6b\xbc\x77\x42\xe9\x93\x6a\x1b\x4a\x2c\x6b\xd5\xf3\xb4\xaf\x13\x04\x41\xe7\x99\x16\xf1\xc8\xa2\x5e\x52\x1e\x51\xbe\x7d\xca\x54\x0a\x86\x77\xb8\x31\x8d\x99\x1a\x9c\xe0\xd6\x01\x38\xb6\xdc\x4d\x64\x55\xba\x36\x1a\xa4\x06\x9d\xc0\x8f\x58\x38\x7b\x31\x74\xe6\xb4\x71\x10\x14\x66\x78\x00\x0f\xe9\x1a\x03\x75\x50\x1a\x63\x0b\xc7\xdf\xeb\x7f\xce\x60\xb9\xa3\x0a\x62\xc2\xe9\x06\x95\x06\xca\x43\x96\x46\xa8\x40\xef\x10\x36\x82\x31\xf1\x48\xf9\x16\x42\x11\x27\x82\x23\xd7\x66\x79\xed\xee\x1f\x74\xce\x00\xbc\xd4\x7d\x23\xf5\x20\xa7\x98\x7f\x0e\x39\xcd\xbe\x66\x8c\x46\x56\x85\x6f\x49\x02\x54\x41\xaa\x30\x02\x2d\x20\xd3\x6b\x04\x02\x0a\xd9\x26\xb0\x5a\x15\x65\x13\xa5\x5c\x69\xc2\x98\xc3\x3f\x5b\xdf\x8c\x4e\x45\x3b\xf6\x27\x1c\xa2\x63\xd2\x8e\x6d\x36\xe8\x0c\x96\x02\x90\x93\x35\x43\x58\x1e\x92\x1d\x39\x07\x85\x1a\xb4\x91\x5e\x0b\xe8\x7a\x72\xda\x34\x75\xe1\x1f\x84\x47\xff\xb0\x1d\x08\x70\xc1\x83\x3f\x51\x0a\xd8\x13\x96\x1a\xf4\xa4\x23\x00\x12\x13\x46\x43\xa2\x2c\xf5\x35\x32\xf1\xd8\x03\xf8\x15\x41\x62\x28\xe2\x18\x79\x04\xa9\x32\x28\xbb\xde\x74\x03\x07\x91\xc2\x8e\xec\x11\x62\x21\x11\xf4\x8e\x70\xf8\xf9\xc2\x99\xf4\x1e\x0c\xd7\x62\x8f\xf0\xea\xc2\x7f\x00\xaa\x81\x3a\xd2\xa8\x14\x72\x4d\x09\xeb\x75\x00\xac\x80\x2b\xef\x9d\x56\x0e\x8a\x2e\x17\x1c\xbb\xb6\xef\x28\xc7\xdc\xac\xb4\x47\x7a\x4d\xc2\x07\x23\x8e\x16\x66\x6d\x0c\x15\x37\xdb\x95\x6f\x18\x40\x77\x4d\x65\xd4\xed\x34\x90\xb8\x5d\xde\xfb\x71\x1d\x63\x04\xf4\x6e\x15\xeb\x74\x00\xdd\x57\x6f\xdf\x5e\xf8\x01\x4b\xc3\x69\x3a\xc9\x0c\x0d\x54\xec\x99\x19\xec\x57\x1a\x04\x07\x24\xe1\xce\x4e\xb0\x07\x76\x9c\x4a\x30\xa4\x84\x59\x3a\x16\x5f\x05\x94\xbb\x55\x71\x64\xe0\x91\x32\x06\x6b\x04\x92\x6a\x61\xcc\x54\x48\x18\x3b\x40\x22\x92\x94\x11\x8d\x91\x9d\x0d\xa7\x2b\xcf\x7c\xe5\x46\x0d\xe0\x7f\x03\x6b\x74\xfe\xc7\x9b\x9e\xae\x41\xaa\x3b\x80\xee\xc3\x3b\x15\x24\x22\x0a\x7c\xff\xee\x79\xd6\x21\xe4\x99\xc2\x99\x6e\x17\xbd\x37\xbd\x8b\xa2\x31\x61\xe9\x96\x72\xd5\x1d\xc0\xef\xfe\x53\x41\xda\x76\xd0\x87\xc4\x92\x77\xc0\xe6\x03\x6d\x1b\x13\xdb\x15\xc3\x3d\x32\xd3\xc1\x98\xdb\x6a\xb3\xd1\x50\xa5\x85\xc4\x55\x46\xc4\xe8\xaf\xe4\xa8\x51\x55\x7b\x1a\xdc\xb2\x79\xac\x56\x9f\xee\x2f\xc7\x77\xd3\xf1\x72\xbc\x58\x4d\x67\x57\xe3\xd5\x74\x78\x3b\x5e\xad\xaa\x23\x62\x9d\x76\x07\xb0\x5a\x8d\xa6\x93\xd5\xed\xf2\x7e\xb5\xaa\xb4\xd2\x84\xc4\xdd\x41\x65\x22\xa5\xa9\x98\xdd\x1a\x30\x11\x12\x56\xa1\x09\xd0\x55\xe9\x9a\xa3\x36\x7d\x52\x85\x73\x11\x8d\x68\x24\xbb\xa5\x2e\xff\xac\x70\xb1\x8e\xe7\x70\xc4\xa7\xc4\xe9\xe1\x9d\x6a\x1f\x5e\x02\xa3\x81\x84\x69\x75\x4b\x5e\x80\x32\x9a\x4d\x3f\x4c\xae\x57\x1f\x26\x37\xe3\xf9\x70\xf9\x71\xb5\xaa\x10\xef\x34\xb0\x69\x5c\xca\x44\x48\x1d\x93\xa4\x0a\xa8\xe2\xc4\x4c\x5c\xcb\x14\x2b\xdf\x43\x92\x90\x35\x65\x54\x53\x27\xa7\x1d\x7d\x4b\x92\x84\xf2\xad\xf2\x03\x4a\xac\xfd\x5f\x2e\xec\xf8\xa7\x77\x88\x47\x56\xdb\x39\x59\x05\x24\xf3\x2e\xe7\xf0\xb8\xa3\xe1\x2e\xdf\x13\x76\xff\x46\xb0\x3e\xf8\x9d\xfe\x93\xf2\xc6\x26\x22\x18\x1b\xab\x7a\xe6\xff\x57\x54\xdb\x8d\xb5\x46\xfd\x88\xc8\xe1\x83\x89\x5d\x80\x18\x9b\xb0\x43\x18\xce\x27\x36\xde\x45\x79\x0e\x12\xa3\x34\x34\x56\x2b\xa7\xc8\x04\x89\xcc\xd6\xad\xf6\xec\x75\xea\x26\xba\xe2\x07\xdb\x0d\xb6\x35\x60\xed\xf6\x1a\x80\x91\x35\x32\x1f\x6a\x98\xdd\x4a\x92\xa4\x36\xd8\x18\x0d\xd3\x6e\x30\xf6\x1d\x03\xfb\xcf\x00\x7e\x7e\xfb\x6f\x6f\x3c\xb8\x89\x14\x5a\x84\x82\x0d\x60\x39\x9a\xfb\x6f\x9a\xc8\x2d\xea\xb9\xed\x5a\x93\xc7\xfc\x1a\x05\x55\xc8\x30\xd4\x42\x9e\x92\xc8\x2d\x60\xfb\xfa\x5d\x61\xc2\xc4\x21\x36\x9e\x56\x6c\xfc\x9a\x68\x67\x98\x2d\xae\xc4\x1a\x7f\x6f\xd5\x6b\xd0\x92\x24\x51\xb5\x30\xa8\x20\xf7\x22\x38\x9f\xc1\x34\x8d\xd7\x28\x0b\xd9\x33\xd7\x67\xac\xf8\x29\xb7\x7a\xe4\x3d\x0b\xc7\xaa\x77\x68\x49\x1f\x3b\x34\xd8\x13\x49\x2d\x45\xea\xb4\xae\xe2\xea\x4b\xb1\x86\x45\xcd\x38\x80\x33\x4b\xe9\x9b\x5d\x6f\xb3\xef\x2d\xfc\xae\xa5\xfe\xff\x1e\x77\xc8\x3d\x59\x23\xd4\xa7\xdc\x2e\x41\x6e\xc1\xff\x7f\x0f\xe0\x5e\x21\x08\x8e\x19\x44\x36\x5e\xc0\x3d\xca\x83\xa1\x1f\xbc\xbe\x28\xb8\x4e\xb8\x25\x9c\x48\x11\xa5\xa1\xf1\x95\xe7\xf0\x58\x9e\x82\x4c\x39\x37\xdc\x88\x06\x13\xdd\x69\x78\x93\xe3\x6e\xb0\xb5\x3b\xd5\x39\x69\x1a\x27\x24\xb4\xaa\x25\x05\x63\x66\x4c\x9a\x6c\x25\x89\x2c\x38\xd9\x98\x01\x5c\xd8\xff\xf6\xd4\xe8\xd5\x47\x6a\x24\x3e\xdc\xd0\x98\xea\x01\xbc\x36\x91\x05\xc6\x89\x71\xa9\x4e\x23\xca\x7a\x65\x7e\x65\x6d\x69\xd7\x18\xd7\x46\x38\x17\xda\x65\x14\xc5\x00\xb7\x39\xce\x81\x30\xc1\x8d\x57\xd7\x3b\x17\xa2\x48\x6a\x7d\xfa\x30\x8a\x04\x57\x33\xce\x0e\xa0\x05\x43\x1f\x3c\xd8\xa8\xea\x1c\x62\x22\x1f\x5c\xec\x9a\x88\x08\x88\xd9\x51\xa1\x1f\x57\xa2\x4f\xa2\x28\x30\x20\x22\x57\xa9\x34\x20\x50\x6d\x12\x13\x05\x89\xa4\x42\x52\x7d\x00\x15\xee\x30\x4a\x2d\x40\xce\xf6\x11\x0d\xc6\x32\xe6\x89\x1f\x10\x69\x56\xc0\x9a\xb8\xa8\x44\x9a\x6e\x0c\x31\xb3\x8c\x8e\x22\xee\x69\xe8\x83\x0f\xf7\xf3\x94\x51\xf6\x08\x4b\x76\xa4\x57\x78\x2d\x93\xc4\x64\xc2\x9a\xc8\x63\x00\x3f\xfd\x94\x0f\xf3\x39\x58\x60\x82\x1b\x15\x12\x33\xbe\x3a\x52\x91\x0d\x06\x5a\x04\x96\xe1\x00\x7e\x32\x7e\xc4\x0d\xcf\x36\xa7\xb5\x5b\x22\xc2\x45\xc5\x4c\x99\x9f\xb1\x18\x35\x72\x42\x0d\x80\x51\x9e\x7e\xf1\x9d\x8c\x8f\x9f\xba\x48\xc8\xf9\xa8\xcc\x4e\xe6\x4b\x50\x59\xc1\x5b\x22\x1f\x9a\x97\xc1\x83\x6f\xb5\x5d\x62\x81\x73\x81\x50\x00\x0f\x78\x18\x34\xac\x77\xc9\x8d\x8a\xc4\x70\x15\x72\x00\xe3\x2f\x54\xe5\x39\xec\x19\x2c\x28\x0f\xf3\x70\x36\x24\xfc\x27\x9d\x47\x9b\xc4\x0a\x93\x72\x4d\x59\xb6\xdd\x15\xa4\x89\xdd\x4b\x1c\x5d\x26\x22\x53\x9e\xb5\x69\x93\x89\xe4\x74\xed\x1c\x6c\xa0\xe3\xc9\x61\x64\xc8\x65\x52\xab\x4a\x52\x37\x6d\xc8\xe8\xec\x22\x0a\xae\x09\xe5\x28\x4b\xf9\x31\x8d\xc9\x36\xef\xdc\xb7\x9b\x23\xcb\x99\xb2\xc9\x36\x5a\x6b\xef\xba\x0a\xc7\xe6\xc8\xe5\x2c\xe6\x75\x2f\xf7\x04\xa5\x66\x37\x08\x80\x7c\x3f\x28\x75\x3a\x83\xb1\xb3\xe1\x2e\x3e\x05\x26\xb6\x5b\xb3\x4b\xd6\x07\x88\x70\x43\x52\xa6\x7b\x00\x23\x62\x36\xa4\x33\xde\x02\xba\x11\xae\xd3\x6d\xd7\xc5\xf7\xc6\xd3\x29\xb4\x45\x02\xa1\xa8\x3e\xf4\x4a\xb4\x03\x2f\xdf\xf2\xb7\xf9\xc7\xe1\xea\x66\x76\xbd\x18\x7f\x1e\xdf\x4d\x96\xbf\x2d\x46\x77\xe3\xf1\xb4\x12\xd1\x59\x27\x91\x45\xc9\x15\xf9\xae\xa8\xb2\x02\x66\x92\x69\x01\x1b\xca\xd0\xee\x63\x75\x50\x4c\x6c\x41\x59\x25\xd1\x3b\xa1\x10\x22\x61\x74\x24\x26\x0f\x46\x5e\xae\xac\x2b\x29\x2c\xf6\x49\xf1\xb2\xb8\xb1\x51\xb0\x2c\xd3\x7a\x7a\x72\xbf\x2d\xbe\x8a\xc0\x19\xdc\x0a\x4e\xb5\x90\x75\xa7\x62\x42\x2d\x3b\x49\x1f\xa4\xf1\xdc\x05\x67\x7e\xc1\xa6\x55\xdc\x5a\x2d\xe3\x2d\x70\x4d\x98\xf9\xb7\x42\x3c\x14\x9c\xa3\x75\x2e\x27\x26\x3d\x9a\x4d\xa7\xe3\xd1\x72\x32\x9b\xde\x8d\x2f\x87\x37\xc3\xe9\x68\x32\xbd\xbe\x9d\x5d\x8d\x1b\x67\x50\x0a\xc8\x5b\x29\x5e\x0d\x97\xc3\xc5\x72\x76\x37\x5e\xfe\x36\xff\x76\x2a\x1f\xc7\xc3\x9b\xe5\xc7\xf1\x74\x78\x79\x33\xbe\x6a\xa4\x62\x4c\x56\x15\xcd\x7b\xee\xdc\xa7\x0d\x30\x14\x1a\x6b\x87\xd6\x5d\xfa\x20\x25\x91\x22\x46\xbd\xc3\x54\x19\x17\x27\x69\x68\x3c\xb1\x33\x2f\xb9\xf5\xa8\x1a\x84\xf3\x0a\x7d\x1b\xd9\x88\x04\xb9\xb2\x96\x47\xea\x2c\x34\x36\x83\xb2\xf8\x3c\x26\x87\xdc\xf6\xd8\x1d\x13\xa6\xb2\xec\x2d\x00\xce\xaa\x33\x9d\xdf\xcd\x6e\xc7\xcb\x8f\xe3\xfb\xc5\xed\x78\x79\x37\x19\x2d\x8e\x27\x7d\x76\x62\xd6\x4f\x10\x9b\xcf\xee\x96\xcd\x94\xde\x5f\xbc\x7f\x53\x50\x62\x74\x8f\x1c\x95\x9a\x4b\xb1\xc6\xb2\x79\xc0\x2f\x85\xaf\x71\x3f\x03\x32\xe1\x51\xf5\x63\xd0\x66\x83\x6c\xd3\x0e\xc3\x87\xda\xb7\x8c\x61\xd9\x5c\xa1\xa4\x22\x5a\x98\xa4\x2e\x52\x03\x78\x73\x51\x6a\xa3\x9c\x9a\x70\xec\x0a\x19\x39\x34\xf5\x90\x48\x22\xfa\xa2\x13\xc8\x39\xb6\xcf\xe0\xd5\xc5\x93\xd9\xc1\x5c\x44\xc6\xbe\xc9\x34\xb1\x41\xcf\x65\x1a\x6d\x51\x97\x0a\x4d\x26\x90\x66\x4c\x3c\xc2\xa7\x77\x2a\x2b\x4d\xc2\x30\x0f\x19\xac\x76\x9b\xf8\xa0\x9a\x37\xb8\xbc\xbb\x96\x39\xcc\x45\x54\x70\x72\x8c\x5e\x24\x85\x88\xc9\x97\x7b\x4e\xf6\x84\x32\xb3\x0b\x07\xf0\xea\x28\xb1\x8a\x89\x0e\x77\x37\x95\x28\xf3\x39\xb9\x96\xaf\x31\xa9\x52\xc2\x60\xeb\x97\x85\xeb\x3c\x37\xde\xfe\x11\x19\xeb\x58\xbf\x5f\xaa\x8f\x8d\xa6\x13\xf0\x15\x1e\x6b\x4a\xab\x85\x2c\x10\xbc\x73\xe6\x0a\x57\x31\xb1\xd0\x9b\x3e\xd6\x36\x48\x1b\x79\x19\xdf\x42\xca\xa6\xdb\x47\x75\x59\x51\xf3\xca\x26\xe3\x0b\xd4\x95\xe5\x29\x4e\x5c\xbe\xf2\xd4\xef\x1b\xd7\xc1\xd5\xab\xfd\x32\x3c\x1b\x72\xcf\xd9\x95\xf1\x17\x5a\x12\x8d\xdb\x83\xeb\xac\x0f\x09\x0e\xe0\xce\x25\x1c\xf7\x45\x9d\x5f\x96\xbf\x64\x74\x9b\xd6\xff\xaf\x25\x1c\xa5\x00\xec\xef\xce\x37\x4a\x34\x4e\x64\x1e\xad\xf9\x46\x69\xf8\xbf\x66\xe6\xf1\x63\x52\x07\x13\x8a\xa5\x12\xcb\xeb\xe7\xa6\x94\xcd\xc0\x56\x99\x08\x63\x3e\x41\x2e\x85\xbf\xb8\xd9\xa0\x49\x7f\xa6\x62\xe1\xfb\x3e\x9d\x34\xfc\xc0\x7c\xa5\x2a\xf2\xf8\x0b\x86\xa9\xfe\x0a\x89\xbf\x2e\xdb\x38\x83\x5b\xca\x69\x4c\xff\x34\x41\xee\x23\xd7\x34\x46\x88\x9c\xfe\x91\x7a\xfa\x0f\x42\x42\x84\x0c\xcd\x6a\xfc\x3b\x68\x64\xac\x6c\xa6\xb4\x80\x48\x00\x81\xee\x46\xc8\xb0\x20\x9f\x0d\xe8\x0e\xf2\xa3\xa7\xaa\x26\x44\x22\x54\xfd\x50\xf0\x10\x13\xad\xfa\x46\x01\x98\x20\x91\xea\xdb\x43\xfe\x44\x44\xfd\x33\x8d\x32\xa6\xdc\x2a\x41\x20\x36\x46\xf7\xf2\xe5\x2c\x35\x5d\x4b\x12\xe2\xbc\xea\x2d\x2f\x5a\x73\x2a\x23\xda\x5d\xca\x55\xb3\x71\xcf\xcf\x16\x4a\xf3\xcb\x8f\x19\x68\x59\x27\x8a\x21\x89\x14\x5b\x49\x62\x95\xdb\x7b\xe7\x31\x5d\x34\x2d\x52\x43\xc2\x53\x2d\x0d\x37\x6a\x5f\x56\x92\x26\x3b\x9d\xfd\xaa\x49\x60\xf9\x34\xad\xe8\x53\x4b\xc4\x6c\x08\xab\x8e\x12\x01\xef\xaf\xd6\x24\x7c\x30\xcb\x9b\x17\x9c\x7a\xb5\x78\xc4\x49\x93\x47\xdf\xab\xa3\xf0\xfb\xa9\x00\xdc\xda\x4d\x57\x32\x4e\x13\x57\x52\x35\x80\x19\xbd\x72\x85\x66\x6b\x43\xb3\x0a\x5c\x33\xfb\x0f\xe3\x9b\xc9\x7f\xac\x6c\x2c\xfa\xe9\xdd\x62\x31\xbe\xfb\x3c\x19\x8d\xa7\xc3\xdb\x46\x49\x3e\x48\x11\x0f\x6a\x0d\xe0\x3d\xef\x2d\x49\x3e\xe1\xc1\x1f\xdf\xd6\x7f\xcd\xa7\x80\xf5\x9f\xdd\xc3\xc7\x25\xc6\xda\x8c\x7f\x25\xd4\xc5\x5b\x66\x76\x4f\x80\xfb\xeb\x70\xb2\x5c\x7d\x98\xdd\x15\x39\x4e\x0b\xc0\xf5\x28\xdd\xd6\x31\x50\xc3\x9a\x28\xcc\x0b\xea\x0f\xef\x9c\x9e\x5a\xe2\xcd\x0c\xa7\xb3\xab\x67\xa2\xb7\xa1\xc8\xa2\x16\xd8\x6c\xdb\x9c\xe8\xdd\xc0\xba\x81\x9e\x61\x3e\x3d\x46\x64\xb4\x13\x26\x8d\xce\x94\xae\x7a\x7a\x78\x2c\xe3\x68\x78\x33\x19\xcd\x56\xd3\xf1\xf2\xd7\xd9\xdd\xa7\xc9\xf4\x7a\x75\x39\x1c\x7d\x1a\x4f\xaf\x7e\xd4\x92\x57\x0f\x38\xeb\x93\xf3\x21\xb4\x89\x60\x6c\xfd\x22\x42\xae\xe9\xc6\x29\x77\x54\x94\xea\x4d\x7b\xf3\x74\x6f\xee\x17\xcb\xf1\xdd\xc9\xed\xf5\x4e\x9d\xaf\xb7\x49\x5d\x01\x4c\xd4\x1e\x44\xa8\x31\xb4\x09\x2a\x5c\x5e\xcf\x61\x32\x37\xde\x48\xa2\x52\xcd\xe0\x4e\xe6\x2d\x3c\x48\xaa\x85\xa3\x55\x67\xe3\xab\x39\x93\x79\x6d\x6c\x6d\xbd\x26\xf3\xcf\x6f\xe7\xb3\xd9\xcd\xea\xa8\x63\xc1\x64\xc8\x1e\xc9\xe1\xc8\x46\x18\x45\xbe\x5d\xde\xbb\x4d\x93\x72\x8e\x0c\x22\x13\x9a\xa0\x3b\xfd\x37\x51\x4b\x42\xed\x6d\x00\x97\x77\x47\x27\x2c\xc5\x64\x3e\x99\x4e\xe6\xb7\xcb\xfb\x1f\xa5\x2c\xd9\xb1\x76\xdd\x0e\x5a\x6d\xb0\xd5\x2f\x98\xcc\xf7\x6f\x21\x11\x82\xd9\x8b\x0d\x36\x73\x33\x5b\x58\x69\x22\x75\x9a\x98\xf9\x72\xc1\x11\xd0\xfa\xf3\x9e\xcd\xe8\x26\x73\x95\x1d\xd4\xd5\x08\x87\x3b\xa1\x90\xc3\x46\x8a\xd8\xd5\x13\x24\xe1\x5b\xec\xc1\x68\x47\xb8\x2b\x6e\x99\x8f\xee\xc0\x84\x6c\x8c\xa6\x96\xef\x4a\x38\xa2\x3b\xb2\xaf\x93\xe5\xc2\x47\x1d\x3d\x97\x1b\xa9\x9d\x48\x59\x04\x1b\x13\x52\x99\xf8\x97\x72\xf8\x23\x08\xb2\x92\x73\x48\x23\xf9\xc7\xc9\xdd\x9c\x6b\xc7\x68\x72\x75\xd7\xa2\x1d\xaf\x2e\x7a\x6f\x5e\xf7\x2e\x7a\x17\xfd\x57\xaf\xeb\x3a\x92\x95\xec\x6c\x9d\x2e\xab\xdb\x29\x01\x7f\xd8\x43\x5b\xcd\xcc\x37\xf5\x87\xcd\xa4\x5a\x34\xdf\x0b\x72\x35\x59\x0c\x2f\x6f\xc6\xf6\x44\x77\x75\x33\xbb\xbe\x9e\x4c\xaf\x9f\x69\x74\xdd\x81\x67\x76\xa5\xc9\x2c\xa2\x71\xe4\xf9\xf2\x92\x30\xbb\xab\x30\x1c\x8d\xc6\xf3\xe5\x29\xc7\x76\x35\xfe\x30\xbc\xbf\x59\x8e\xa7\x57\xf3\xd9\x64\xba\x5c\xce\x3e\xce\x16\xcb\xa1\x2d\x9f\xb5\x6d\x21\x4b\xb3\x0d\x9e\xc9\x7c\xff\x8b\xd1\xa5\xe6\xf2\xe4\xf1\x66\xf9\xfc\xcb\xe2\x7e\x5e\x2b\xe9\x94\xb9\x6d\x08\x53\x27\x30\x28\x15\x50\x8f\xca\xac\x75\x66\xa7\x8b\xb5\xed\xe5\xda\x3a\x9d\xf6\x42\x5e\xfb\xca\xd9\xa2\x19\xd5\x87\x91\xe0\x1a\xbf\xe8\xea\x16\x4f\x24\xdd\x53\x86\x5b\x8c\x2a\xb9\x07\x34\x5d\xe2\xcb\x3e\xff\x77\x8a\x4a\xab\xba\xa9\x08\x93\x74\x00\xaf\x7f\xbe\x88\x4b\xdf\x5b\xeb\x60\x60\x23\xe2\x6b\xd4\x75\x2a\x89\x75\xa8\xfd\x86\x7a\x16\xf8\x72\xfe\x00\xde\x5f\xbc\x7f\x5f\x6b\x30\x3a\x38\x00\x7b\xc7\xc2\xfc\x59\x9d\xe2\x51\x19\xa9\xdc\xda\x58\x0a\xab\xf5\xd9\x10\xca\x52\x89\xcb\x9d\x44\xb5\x13\x2c\x1a\xc0\x2f\x15\x9c\xda\x8a\x65\x4d\xe5\xb2\x96\x82\x99\x59\xe8\xfe\x9a\xf2\x7e\x73\x00\xec\x3a\x04\x6b\x2a\xa3\xc0\xf0\x3b\x1c\xb7\xd9\x5b\x94\x0d\x8d\xa7\xa6\xbf\x17\x2c\x8d\xf1\xd6\xde\x5b\xae\x17\xf0\x62\xf3\x75\x9e\x2d\xc7\xba\x1f\x0b\x93\x2e\xd6\x57\xc4\x29\x27\xa3\xeb\xa0\xb9\xdd\xc8\x63\x72\xbd\x23\xed\xaa\xb3\x90\x29\xef\x7f\xd1\x66\x1f\xab\x1e\x13\xb5\xfa\x60\xc6\xc7\x77\x08\x1a\x3a\x14\x8c\xec\xb6\x3d\xc1\x69\x4f\xa4\xe5\xe6\x90\x6e\xe4\xb3\x27\x32\x90\x29\x0f\x1a\xbb\x3c\x8f\x93\x81\xee\x09\x4e\x06\xbd\x67\x71\xf2\x25\xbb\x22\x01\xab\xd4\xec\x4a\xb5\xb8\x35\xe5\x44\x52\x2c\x67\x6d\x26\x27\x3b\xbe\x63\xe6\x5c\x4b\xe5\x5a\xd9\x51\x6a\xe6\x99\x04\x21\xa7\xad\xa9\x59\xe9\x46\x63\xd1\x25\x53\x78\xf8\xbd\xdb\x2f\x11\xe9\xa9\x9d\xbf\x2e\xec\x7e\x0d\x09\x9c\x89\xa7\x41\x6c\xdc\xb4\xa6\x93\x8a\xb0\x79\xf8\xd0\xe2\xf1\xa6\x93\xd5\x68\x36\xfd\xb0\x6a\x8b\xf8\xad\xcf\xf5\xb8\xf7\x0c\x61\x46\xd5\x51\xf8\xb7\x70\xf7\x2b\xac\x7d\xb1\x37\x2a\x9e\x9b\x73\x34\xdd\x2d\x7b\xd1\xfc\xa3\xf9\x4e\x61\xeb\x65\xc2\x56\x2c\x7d\x46\xb2\x72\x77\xc2\x7e\x58\x36\x72\x74\x41\xb1\x9e\x91\x4c\x27\x36\x9c\x76\x99\x75\x7e\x01\xa6\x75\x5a\xff\x5a\xc1\xf2\xd7\xda\x63\xa3\x8e\x7d\x91\x68\xb3\xdf\x8c\xd7\x68\x34\x2d\x21\xa7\xc1\x9a\xf2\x20\xa2\xf2\x29\x52\xa8\x43\x4b\x8a\xa3\xee\x45\xad\xc4\x38\xea\x12\x31\x27\x6b\xa5\xaa\x74\xaf\x5c\x69\xa3\x54\xa7\x39\x36\x23\xcd\xbe\xc2\x88\x61\x25\xaa\xfa\xae\x76\xf7\x13\x3c\x65\xaa\x4f\x52\x6c\xf1\x01\xc1\x53\x56\xf9\x49\xa2\x0d\xe6\x3e\x38\xed\xbc\x4e\x92\x3c\xe9\x15\xdd\xb9\xc1\x07\xca\x70\x26\x47\xe5\x67\x04\xf9\x5a\x94\x76\xf9\x68\x3a\x69\xa8\xb6\x35\xaa\xc8\x49\x89\x9a\xb4\x2e\x68\x55\x92\x27\xc9\x55\x35\xef\xe8\x39\x43\xfd\x36\x64\xf6\x2a\xe0\x1b\x0f\x78\xb2\x13\x2f\x87\x96\x2d\x91\x5b\xd7\x92\x2a\x2d\xe2\x3b\x1f\xef\x5e\xe1\xc6\x06\x85\x82\x2b\x7b\xf6\x8c\x91\x49\xce\x8b\x77\x05\xa5\xe2\x66\xf1\xea\x06\x62\xab\xec\xb5\xfb\x86\xb4\x38\x9b\x6a\x79\x86\xd1\xc2\xb9\x32\x41\x3f\xc3\x86\x67\x32\xbd\xc6\x47\x38\xc5\x21\x55\x28\x8c\x86\xf8\x2a\x4d\x07\x60\xeb\x9e\x6d\x34\x8f\x82\xec\xed\x82\x85\xdd\x63\xe8\x8f\xc2\xac\xb0\x36\xed\x19\x95\x05\xb0\x8d\x09\x4b\x25\x61\x8d\xf2\xd9\x76\x45\xf9\x36\x65\x44\x36\xf5\x38\x5e\xf1\xbf\x0b\x34\x87\x59\xf6\x7c\xe8\x65\x81\xba\xbc\x9e\xcf\x11\x65\x05\x9d\xca\x43\xa6\x02\x12\xff\xb9\xe1\x25\xcf\xdf\x0e\xc4\x8f\x54\x9d\xcb\xeb\x79\xbb\xe2\x34\xbf\xdc\xaa\x60\x54\x55\x9a\xef\x0d\x96\x7f\x30\xf6\xb2\x10\x4d\xe6\x73\x21\x58\x05\x98\xf2\xc3\xb5\x02\x0e\xf7\xf5\xbb\x83\x50\x79\xb9\xf6\xb2\x50\x7c\x14\x4a\x8f\x3d\xeb\x0a\x20\xc7\xaf\xe9\x0a\x58\xca\x6d\xdf\x1d\x9c\x86\x27\x7f\x2f\x0b\x91\xa7\x33\x29\x04\xa8\x00\xd5\xf6\x24\xb1\x80\xeb\xb8\xc7\x77\x07\xad\xf1\xdd\xe5\xcb\xc2\x76\x6d\x45\xf0\xa7\xed\x73\xeb\xc8\x2b\xb8\xb5\x3f\x0d\x2d\x90\x3b\xee\x73\x78\x59\xe8\x14\xbe\xf4\x86\xac\xc0\xb6\x40\xdd\x8e\x59\xfe\x60\xb6\x05\x2f\x85\xdf\x7f\x73\x7e\x93\x86\x4d\xb3\x88\x31\xfa\xcb\x68\xb5\xab\xd7\x69\xc5\xaa\xa9\xd4\xff\x05\x00\x00\xff\xff\x60\x0c\x8e\x8c\x49\x41\x00\x00"

func netCalicoYamlBytes() ([]byte, error) {
	return bindataRead(
		_netCalicoYaml,
		"net/calico.yaml",
	)
}

func netCalicoYaml() (*asset, error) {
	bytes, err := netCalicoYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "net/calico.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x5c, 0x4d, 0x26, 0x84, 0x40, 0x8c, 0x8a, 0x53, 0x6f, 0xf9, 0xb9, 0xe7, 0x4d, 0x52, 0x32, 0xd7, 0xde, 0xcc, 0x84, 0x62, 0x16, 0x62, 0xa0, 0x88, 0x58, 0x2d, 0xc8, 0x73, 0x53, 0xeb, 0x24}}
	return a, nil
}

var _netFlannelYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x73\xdb\x36\x13\xbe\xf3\x57\x60\x78\x36\x3f\x94\xe4\xcd\xbc\xe5\xcd\xb1\xd3\x9c\xe4\x7a\xe2\x4e\x2f\x9d\x4e\x07\x02\x57\x14\x62\x10\x80\x81\x85\x6c\xb5\xf5\x7f\xef\x80\x22\x25\x50\x94\xe4\x34\x71\xc6\x33\x32\x79\x22\x16\xbb\xcf\x7e\x60\xb1\x0f\x67\x98\x24\x49\x74\xcb\x65\x59\x90\x0b\xe1\x2c\x82\xf9\xac\x04\x44\x54\xf3\xdf\xc0\x58\xae\x64\x41\xcc\x8c\xb2\x94\x3a\x5c\x28\xc3\xff\xa2\xc8\x95\x4c\x6f\xff\x6f\x53\xae\xb2\xe5\x64\x06\x48\x27\x51\x0d\x48\x4b\x8a\xb4\x88\x08\x91\xb4\x86\x82\xcc\x05\x95\x12\x44\x64\x9c\x00\xeb\xc5\x09\xa1\x9a\x7f\x32\xca\xe9\x66\xe9\x9f\x84\xc4\x71\xf3\x6a\xc0\x2a\x67\x18\x04\x3b\x5a\x95\xb6\x59\x2c\xc1\xcc\x02\x79\x05\xf8\xdf\xc1\xa4\x2a\x61\x2f\x9a\xe0\x16\x37\x8b\x7b\x8a\x6c\xf1\x8d\xe0\x99\x45\x8a\x6e\xaf\x0f\xdd\xc0\xee\xad\xf2\x07\x2e\x4b\x2e\xab\xe7\x2b\xb6\x12\xf0\x19\xe6\x7e\xa3\x4b\xe1\x08\x60\x44\xc8\xf0\xdc\x77\x21\xad\x9b\x7d\x01\x86\xb6\x88\x92\x56\xfb\x06\xcc\x92\x33\x38\x67\x4c\x39\x89\x03\x83\xf5\xda\x6a\xca\xa0\x20\xb7\x6e\x06\x89\x5d\x59\x84\xba\xa9\x40\x98\xe8\x72\x12\xed\x05\x3c\x9c\xde\x51\xe8\x36\x15\x25\xe7\xbc\x9a\x52\xbd\xeb\x6a\x88\xda\x00\xb4\xd0\x09\x9b\x57\x87\xe1\x09\x11\x74\x06\xa2\x3d\x53\xe4\x60\x8a\xe6\xd4\x9b\x25\xd5\x7a\x1b\x61\xe7\x81\x49\x9e\x30\x25\xe7\xe9\x17\xeb\xfd\xff\xd3\x68\xfe\xdd\xb6\x44\xec\xdd\xc4\x05\x89\xd9\xcc\xe4\xf1\x59\x27\xd5\xc2\x55\x5c\xda\xb8\x20\xbf\xb7\xa2\xad\x49\xa3\x80\x2b\xdd\x98\xb5\xce\x36\x96\xcd\x66\x09\x02\x2a\x8a\x5e\x21\x34\x22\x24\x5e\x50\x6e\x34\x97\x53\x55\xfa\x4d\x34\x0e\xce\xfa\x0a\xdc\x5e\xc2\x9c\x3a\x81\x9f\x28\xc2\x3d\x5d\xb5\x5a\x81\xd2\xe3\xe6\xfd\xf1\xec\x78\x6c\x5a\x19\xac\xa9\xee\xc7\xc6\xa8\xa6\x33\x2e\x38\x72\xb0\xc3\xf8\xbc\xc9\x94\x6a\xcd\x65\x65\x8f\xba\x6e\xdf\xfe\x88\xba\x95\x04\x3c\x52\xe5\x2b\xc0\x7b\x65\x6e\x7d\x54\x93\x3c\x7d\xfb\x26\xcd\xd3\x3c\x9b\xbc\xd9\x16\xfc\x03\x65\xb7\x20\xcb\x5e\x44\xf1\xaf\x6d\x22\xcb\x07\x41\x65\x1c\x85\xae\x1f\x07\x2d\x0c\x0f\x08\xd2\xbf\xda\xcd\xe5\x5c\xb7\xe1\x25\x85\x5a\xc9\x1b\xd8\xd7\xcd\xbd\xbe\x2b\x6d\x42\xeb\xf2\xfd\xbb\xe7\x68\x3e\xab\x81\x79\x2d\x84\x5a\x0b\x8a\xb0\xb6\x08\x03\xf0\x4f\x88\xb6\x07\x71\x80\xea\x05\x1d\xb2\x7f\x16\xca\x62\x5b\xda\xde\x61\x79\x84\x1b\x10\xc0\x50\x99\x2d\xba\x2f\x4a\xea\xd3\x31\x12\x10\x9a\x31\x46\x0d\x5b\x14\xa4\xcb\xba\x09\x41\x09\x30\xcd\x64\x0a\xc6\xa6\xd2\x5e\xa6\x4c\x41\x3e\x3e\x70\x8b\x76\x03\x09\xf3\x39\x30\x2c\xc8\x95\xba\x61\x0b\x28\x9d\xe8\x22\xb0\xbd\x39\x72\xb5\x33\x3a\xfc\xc3\x25\xc7\x0b\x25\x91\x72\x09\x26\x1c\xe1\x8d\x2e\x97\x16\xa9\x10\x09\x93\x7c\xe3\x8c\xd7\xb4\x82\x82\xdc\x39\xba\xf2\xb1\x33\x65\x40\xd9\xac\x45\x2d\x96\x79\x3a\xc9\xd3\x3c\x09\x93\x21\x84\xa9\xba\xa6\xb2\xdc\x16\x21\x21\x4c\x6f\x8b\x6b\x2a\x1b\x6e\x25\xf3\x60\x91\x01\xb2\x2c\x6c\x90\xac\x37\x49\x76\x35\x99\xe4\x99\x04\x4c\xcb\x6c\x92\x77\x16\xa9\xd7\x0e\x78\x8d\x90\xa5\x12\xae\x86\xa9\x2f\x4a\xcf\xf3\x3a\xeb\x30\x5b\x42\x6a\xaf\x75\x4d\x71\x51\xec\x78\x18\xd8\xf5\x27\xe7\x21\xfb\x5e\x2e\x51\x57\x9f\x43\x27\x10\x6a\x3f\xf7\x11\x64\x4a\x63\x36\xe3\xb2\xb3\x2c\x0f\x9f\x48\xc2\x75\x52\x53\x7b\xd7\x93\xad\xef\xa4\x9b\xf9\xa1\x53\x57\x66\xb3\x37\xf8\x22\x58\x0b\xef\x1c\x58\xec\xc9\x08\x61\xda\x35\xc3\x28\xaf\xe3\x9e\xbc\x86\x5a\x99\x55\x41\xe2\xff\xe5\x53\x1e\x6e\x09\x5e\xf3\xef\x04\xb1\xc0\x9c\xe1\xb8\xf2\x6d\x0f\x0f\x18\x62\x69\xc3\x97\x5c\x40\x05\xe5\xce\xd4\x05\xb9\x1c\xf6\xc9\xf5\x2f\x97\x7f\x5e\x9d\x4f\x3f\x06\x00\x4b\x2a\x1c\xfc\x6c\x54\xdd\x8f\x70\xce\x41\x94\xed\x67\xc8\x40\xbe\xee\x8d\x6e\x28\xa5\x1e\xfb\xa0\xab\x9b\xeb\xf3\x8b\x1f\xe0\xaf\x19\xb2\x5f\x79\x3b\x8c\x93\x07\xba\x3b\xdc\xf9\xfe\x3b\xb1\x8e\xe2\xc9\x00\xfc\xf0\x6d\x90\x7a\xa9\xea\xc3\x11\xf5\x6f\xf7\x51\xf3\x6f\xb9\xee\xac\xfb\xdc\xea\x23\x1e\xf8\xc0\xfa\x31\xf4\x69\xea\xd7\x48\x9f\x6d\xd6\xe4\x24\xe8\x33\x48\x66\xa4\xcf\x97\xa1\xcf\xa7\x8e\x60\xa4\xcf\x91\x3e\x47\xfa\x3c\x49\xfa\x7c\x8d\xe4\x79\x42\xd4\x39\x12\xe7\x0b\x13\xe7\x48\x9b\x23\x6d\x3e\xed\x6f\xa4\xcd\x53\xa2\x4d\xad\xd9\xfb\x77\x9b\xdf\x25\xaf\x87\x3a\xb7\x79\x93\x53\xa0\xcf\x7e\x3a\x23\x85\xbe\x08\x85\x7e\xc5\x21\x8c\x34\x3a\xd2\xe8\x48\xa3\xa7\x47\xa3\xf6\xed\x4f\xf9\xc3\xab\x23\xd1\x2e\x6b\x72\x0a\x14\x1a\x26\x33\x12\xe8\x8b\x10\xe8\x93\x47\x30\xd2\xe7\x48\x9f\x23\x7d\xbe\x28\x7d\xfe\x1b\x00\x00\xff\xff\xfc\xf5\x36\x47\x66\x29\x00\x00"

func netFlannelYamlBytes() ([]byte, error) {
	return bindataRead(
		_netFlannelYaml,
		"net/flannel.yaml",
	)
}

func netFlannelYaml() (*asset, error) {
	bytes, err := netFlannelYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "net/flannel.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x7e, 0x79, 0xf6, 0xaf, 0x57, 0x27, 0x9, 0x6a, 0xfb, 0x87, 0x22, 0xaf, 0x46, 0x98, 0x7c, 0xd7, 0xd7, 0x4d, 0xa3, 0x9b, 0xd5, 0x45, 0x5d, 0x0, 0x5a, 0xa9, 0xc8, 0x8, 0x37, 0x5c, 0xaa}}
	return a, nil
}

var _netWeaveYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x73\xe3\x34\x10\x7f\xef\x5f\xb1\x93\x97\xc2\x80\xbf\xca\x95\x16\xcd\x30\x50\x7a\xd7\xc2\xcc\xf5\x63\x9a\x1e\xef\xb2\xbc\x49\x44\x64\xc9\x48\xb2\xdb\x70\xf4\x7f\x67\x64\x27\x39\x47\x76\xe2\x1e\x77\x30\xed\x5c\xfd\x64\xaf\x76\x7f\x5a\xed\xc7\x4f\x92\x69\xc1\x7f\x47\x6d\xb8\x92\x04\xaa\x64\x6f\xce\x65\x46\xe0\x2d\x37\x76\x8f\x5b\xcc\x0d\xd9\x03\x08\xc0\x53\x02\x00\x68\x14\xc7\xa8\x2b\xce\xf0\x84\x31\x55\x4a\x5b\x0f\xe4\x68\x69\x46\x2d\x25\xf5\x17\x80\xa4\x39\x12\xb8\x43\x5a\x61\x20\xd1\x2e\xa5\x54\x4a\x65\xa9\xe5\x4a\x9a\x95\x22\x00\x13\xaa\xcc\xc2\x5a\x35\xbc\x53\x7a\x6e\x22\x41\x4b\xc9\x66\xa8\x03\x2e\x27\x8a\xc0\xdf\xc1\x5a\x17\xe0\x7d\xeb\x1d\x60\xa4\x34\x9f\x72\x49\x45\xa0\xf1\xcf\x12\x8d\x1d\x11\x4f\x03\x60\x54\x6a\x31\x22\x30\x8a\xe6\xc7\x26\xaa\x92\x30\x89\x23\x89\x36\x5c\xd0\x5c\xfc\x34\x3f\x36\x41\xd5\xac\xf1\xc7\x24\x4c\xbe\x1b\x7d\xeb\x1b\x67\xd4\xa2\xb3\xbe\x50\x12\xce\x30\x85\x24\x81\x83\x38\xf9\x01\xe2\x57\xe4\x30\x26\xf1\x11\x9c\x5f\xdc\x7e\x13\xc7\x71\x0c\x5f\xbd\xbb\x3d\xfd\x7a\xb4\x61\xff\xb0\x09\x37\xc2\x9c\x72\x11\xd0\x2c\xd3\x68\x8c\x43\x35\x65\x51\x28\x6d\x7f\x6e\xad\xbe\x8d\xf0\xb0\x7c\x17\x34\x45\xd1\x0a\x59\x7f\x74\x9d\xd4\x14\x94\x21\x81\x79\x99\x62\x60\x16\xc6\x62\xde\x49\xa5\x4e\x29\x0b\x69\x69\x67\x4a\xf3\xbf\xea\x64\x84\xf3\x63\x13\x72\x15\x55\x49\x8a\x96\xb6\x33\x7d\x2a\x4a\x63\x51\xdf\x28\x81\x2f\x69\x7e\x12\x69\xd6\xa5\xc0\xb5\x4a\x9d\xd8\x73\xad\xca\xa2\x65\xe5\xc4\xfb\xfb\xeb\x4f\x8d\x46\x95\x9a\xa1\xa7\x51\xa8\xcc\x6c\x08\xd6\xd5\xe3\x89\x55\xd6\x92\x54\xa8\x53\x0f\x68\xba\x4e\x7b\xf3\x2d\x1c\x8b\xb4\x05\x77\xd4\xb2\xd9\x90\xc3\x12\xad\x0b\x0b\x97\xd3\x65\x31\x0e\xf9\xbf\x34\x28\x94\xe0\x8c\xff\x1f\x1e\x0e\x87\xb4\x0e\x55\x64\x2c\xb5\xe5\x4e\x7f\x8a\xd6\x74\x8d\xa4\x2c\x5c\xfd\x7d\xae\x4e\xfd\x85\xcb\x8c\xcb\xe9\x4b\xc3\x3e\x8d\x86\x55\x02\x6f\x70\xb2\x52\xea\xe7\xd5\xad\x89\x59\xd6\xe2\x8e\x5a\xa8\x35\x4d\x99\xfe\x81\xcc\xb6\x88\x61\xeb\x4e\xbd\x7d\xb2\xff\x64\x07\x79\xd9\x3a\x9e\x4c\x25\xee\xc8\xef\x27\xec\x2b\x97\x0e\x73\x53\xab\x5b\x58\x5b\x18\x93\x29\x39\xe1\xd3\x9c\x16\x1f\xc5\xdf\x6b\xb6\xfc\x58\x57\xff\xd5\xec\x4c\xe3\xa7\x72\xf3\x0b\x29\x3f\xaf\x56\xe8\x63\xec\x67\x4a\xd5\x78\x6f\x51\xba\x57\xd3\x53\x97\xaf\x29\xe6\x4a\x8e\xf1\xe5\x0a\xf7\x0c\xaa\xd2\x14\xc8\x56\xe6\x39\x97\x37\x48\xb3\xc5\x18\x99\x92\x99\x21\x70\xb8\x1c\xb0\x98\x17\x82\x5a\xfc\x30\x8f\x9f\xd5\x3e\x5f\x76\xd5\x59\x7b\xda\x3a\xd5\x4a\x5a\xca\x25\x6a\xcf\x3e\x68\x23\x78\x19\x60\x2a\xcf\xa9\xcc\x88\x27\x76\x46\xd1\x4c\xe5\x18\xd5\x46\xcb\x9a\x09\xcd\xcc\xd3\x43\x59\xf5\x99\x36\xf3\xfd\x7a\x35\xbe\xbd\x3c\xb9\x78\xd3\x51\x00\xa8\xa8\x28\xf1\x4c\xab\xbc\x6b\xed\x9e\x09\x47\x91\xb5\xfa\xdc\x7f\x7a\x7e\x7f\x6c\x01\xb9\xa6\x76\x46\xea\x48\x85\xee\x0e\xe0\x76\x44\x4f\x9d\xe7\x74\x8a\x04\xf6\x33\xc5\xe6\xa8\xdd\x2e\x51\x2f\xb9\xe9\x95\x26\xe8\x2e\xdf\xe4\x20\x3c\x0c\x93\x7d\xcf\x58\x23\xcd\xb8\x44\x63\xae\xb5\x4a\xb1\xeb\xee\xcc\xda\xe2\x1c\x6d\xdf\x3a\x66\xca\x58\x02\xc9\xc1\x51\x18\x87\x71\xd8\xb7\x88\xa2\xf6\xdd\xbf\xb5\xb4\xc6\x95\xb6\x04\xbe\x3f\x3a\x7e\xd5\xf1\xaa\x67\x53\x5d\x0d\xd5\x8d\xdc\x33\x02\xc0\x8a\x92\x40\x12\xe7\xde\x90\x41\x56\x6a\x6e\x17\xa7\x4a\x5a\xbc\xef\x59\x4b\xa1\x79\xc5\x05\x4e\x31\x23\x60\x75\xe9\x07\xb8\x52\xa2\xcc\xf1\xc2\x51\x67\xcf\xb4\x1b\xc5\x99\xa5\x3d\x6e\xe5\xce\xb2\xc9\x63\xb4\x4d\x6b\x85\xc2\x24\x0f\x52\x2e\x07\x50\x5c\xe8\x23\x55\xd8\x21\x98\x83\xc7\xe0\xb8\x2e\xd9\x09\xe4\xce\x32\x8f\x01\x42\xcb\xb6\xe2\x64\x69\x6f\x05\x74\x30\x2a\xaa\x23\xc1\xd3\xa8\x57\x7f\x05\x26\x78\x1a\xe4\x2a\x73\xa7\xca\x01\x4c\x07\xb5\x4d\x73\x85\x76\x6f\x69\x2a\xd0\x04\x42\xb1\xf9\x00\x9c\x2e\x65\xb4\x54\x0f\x3b\xea\xc1\x26\xcf\x15\x7e\x30\xbe\x0c\xaa\x91\x05\xdb\xc6\x34\xcf\xaf\xa7\x3f\x4f\x69\xb8\xc2\xbe\x6c\x7e\x29\x75\x7c\x71\x63\xd7\xbf\xbd\xee\xc8\x35\x1a\x4b\xb5\xbd\x56\x82\xb3\x05\x81\x13\x71\x47\x17\xed\x12\xde\xb9\x7e\x83\x6f\xb9\x2c\xef\xaf\x8a\xe6\x28\x05\xef\x1f\x36\x2c\xdb\x67\xc1\xcb\x2d\x5b\x33\x80\x55\x02\xb5\x7f\x18\x6b\x82\x83\x93\x09\x32\x4b\xe0\x52\x8d\xd9\x0c\x5d\x77\x79\xc1\x51\x85\x33\x55\x9a\xc0\x9b\x7b\x6e\x6c\xdb\xf1\x26\xf0\xbb\x36\xf8\x0e\x3b\xd6\x31\x72\x51\xee\x26\xb9\x89\xfd\x8a\x34\xba\xe7\x83\xdd\xb4\x3a\x08\xec\x53\xec\x00\xbd\x0e\xe2\x75\xa8\x76\x80\x66\x07\x01\x7d\xca\xdd\x41\xb7\x8f\x8e\x62\xc7\x76\x98\x76\x07\xb1\xb7\xf1\xf0\x23\x1a\x6d\x10\x7b\x27\x29\xbb\xc7\x2e\x0a\x24\x70\xc6\x05\x5e\xe9\xd3\xd5\x8d\xdb\x3d\xcd\x65\x7f\x6c\x35\xb5\x38\x5d\x7c\x98\xa0\x31\xb8\x51\x42\x70\x39\x7d\xd7\xfc\x11\xf8\x27\x00\x00\xff\xff\x7e\x75\xf5\x00\xd6\x1a\x00\x00"

func netWeaveYamlBytes() ([]byte, error) {
	return bindataRead(
		_netWeaveYaml,
		"net/weave.yaml",
	)
}

func netWeaveYaml() (*asset, error) {
	bytes, err := netWeaveYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "net/weave.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0x1b, 0x66, 0x37, 0x17, 0x60, 0xa7, 0xe2, 0x94, 0x1d, 0x3c, 0x85, 0xdd, 0x35, 0xf, 0x8e, 0xd4, 0xba, 0x5b, 0x51, 0x50, 0xfe, 0xc4, 0xe7, 0x7c, 0xaa, 0xac, 0xb1, 0x3a, 0x5e, 0x30, 0x84}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"addon-images": addonImages,

	"registry.yaml": registryYaml,

	"net/calico.yaml": netCalicoYaml,

	"net/flannel.yaml": netFlannelYaml,

	"net/weave.yaml": netWeaveYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"addon-images": &bintree{addonImages, map[string]*bintree{}},
	"net": &bintree{nil, map[string]*bintree{
		"calico.yaml":  &bintree{netCalicoYaml, map[string]*bintree{}},
		"flannel.yaml": &bintree{netFlannelYaml, map[string]*bintree{}},
		"weave.yaml":   &bintree{netWeaveYaml, map[string]*bintree{}},
	}},
	"registry.yaml": &bintree{registryYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
